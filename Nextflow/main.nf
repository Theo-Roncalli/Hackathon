// nextflow run main.nf --reads ../Data/Reads --genome ../Data/Genome --index ../Data/Index

/*
    Nexflow pipeline to perform a full RNA-seq analysis (differential expression)
    from a series of SRA accession numbers and a reference genome.

    All parameters are defined in the `params` scope
    within the "nextflow.config" configuration file.
    However the default values can be overriden by 
    specifing them as command line arguments.

    Usage:
    -----
    * Launch the pipeline using the default params
        $ nextflow run main.nf

    * Override params.ids (SRA accession numbers)
        TODO



    ######################################################################
                    WORKFLOW DIAGRAM
    ######################################################################

    ---------------     --------------------
    | SRA entries |     | Reference genome |
    ---------------     --------------------
        ||                     ||
        ||                     ||
        ||              ------------------
        ||              | Index building |
        ||              ------------------
        \\                     ||
         \\                    ||
          \\           ------------------------
           \\==========| Mapping RNA-seq data |
                       | to reference genome  |
                       ------------------------
                               ||
                               ||
                        -------------------------------
                        | Building a count matrix     |
                        | (for genes accross samples) |
                        -------------------------------
                               ||
                               ||
                        -----------------------
                        |Perform differential |
                        |expression analysis  |
                        -----------------------
                               ||
                               ||
                        -----------------
                        | Build reports |
                        -----------------

    ######################################################################
*/

nextflow.enable.dsl=2

log.info """\
D I F F R N A - N F  v0.1.0 
===========================
genome_url       :  $params.genome_url
annotations_url  :  $params.annotation_url
SRA ids          :  $params.ids
readlength-1     :  $params.sjdbOverhang
reads_dir        :  $params.reads
genome_dir       :  $params.genome
index_dir        :  $params.index
"""

process Fasterq {
    /*
    Use ncbi sra-tools' fasterq-dump to rapdily retrieve
    and extract fastq files from SRA-accession-numbers.

    arguments:
    ---------
        ids: a SRA accession number (a channel containing many of them)

    output:
    ------
        A chanel of tuples, containing the id (SRA accession)
        and the path to the fastq files (id, [id_1.fastq, id_2.fastq])

    For further information refer too fasterq-dump's documentation:
    https://github.com/ncbi/sra-tools/wiki/HowTo:-fasterq-dump
    */

    tag "Downloading ${ids}..."

    input:
        val ids

    output:
        tuple val("${ids}"), path("*_{1,2}.fastq")

    script:
    """
    fasterq-dump ${ids}
    """
}

process Genome {
    /*
    Use `wget` to retrieve a genome, then expand it using `gunzip`.

    arguments:
    ---------
        url: url pointing to the desired reference genome

    output:
    ------
        A path (glob), of all the uncompressed parts of the genome.
    */
    tag "Retreiving genome: ${genome_url}, annotation: ${annotation_url}"

    input:
        val genome_url
        val annotation_url

    output:
        path "*.f*a"
        path "*.gtf"
        // DISCUSSION :
        // gunzip expands the patterns `*.fna.gz` and `*fa.gz`
        // shouldn't this wildcard be the same ?

    script:
    """
    #!/usr/bin/env bash
    echo "Downloading genome..."
    wget ${genome_url}
    [[ ${genome_url} == *.gz ]] && gunzip *.gz || echo "File already unzip."
    echo "Downloading annotations..."
    wget ${annotation_url}
    [[ ${annotation_url} == *.gz ]] && gunzip *.gz || echo "File already unzip."
    """
}

process Index {
    /*
	Create an index for the desired reference genome.

    arguments:
    ---------
        genome_file: a path, pointing to the genomeFastaFiles

    output:
    ------
        path: A directory containing the genome index generated by STAR

    params:
    ------
        params.index_cpus: an integer, specifying the number of threads to be used
                           whilst creating the index.
    */

    tag "Creation of the index"

    input:
        path genome_path
        path annotation_path

    output:
        path "GenomeDir"
    
    script:
    """
    #!/usr/bin/env bash
    STAR --runThreadN ${params.index_cpus}\
         --runMode genomeGenerate\
         --genomeFastaFiles ${genome_path}\
         --sjdbGTFfile ${annotation_path}\
         --sjdbOverhang ${params.sjdbOverhang}
    """

}

process Mapping {
    /*
	Create the mapping and counting for the RNA-seq data.
    */

    tag "Creation of the mapping and counting matrix for ${fastq_files[0]}"

    input:
        each fastq_files
        path index_path

    output:
        path "Counts"
    
    script:
    """
    #!/usr/bin/env bash
    echo "Downloading mapping and counting for ${fastq_files[0]}..."
    mkdir Counts
    STAR  --runThreadN ${params.mapping_cpus}\
    	  --genomeDir ${index_path} \
    	  --readFilesIn ${fastq_files[1][0]} ${fastq_files[1][1]} \
    	  --outSAMtype BAM SortedByCoordinate \
    	  --quantMode GeneCounts \
    	  --outFileNamePrefix Counts/${fastq_files[0]}_
    echo "Done for ${fastq_files[0]}"
    """

    // echo "${fastq_files[1][0]} and ${index_path}"

/*
    STAR  --genomeDir ../Data/Index \
      --readFilesIn ../Data/Reads/SRR628582_1.fastq ../Data/Reads/SRR628582_1.fastq \
      --outSAMtype BAM SortedByCoordinate \
      --quantMode GeneCounts \
      --outFileNamePrefix .
*/

}

workflow {

    // SEE EXPLANATION OF THE NEW PROGRAM STRUCTURE AFTER THE WORKFLOW

    // Retrieve RNA-seq data (fastq files / SRA accession numbers)
    ids = Channel.fromList(params.ids)
    fastq_files = (
        params.reads == null ?
        Fasterq(ids) :
        Channel.fromFilePairs("${params.reads}/SRR*_{1,2}.fastq*", checkIfExists:true)
    )
    //fastq_files.view()

    // Retrieve genome and annotations
    if (params.genome == null) {
    	Genome(params.genome_url, params.annotation_url)
        path_genome = Genome.out[0]
        path_annotation = Genome.out[1]
    } else {
    	Channel
            .fromPath("${params.genome}/*.fa", checkIfExists: true)
            .set{ path_genome }
    	Channel
            .fromPath("${params.genome}/*.gtf", checkIfExists: true)
            .set{ path_annotation }
    }
    //path_genome.view()
    //path_annotation.view()

    // Create genome index
    path_index = (
        params.index == null ?
        Index(path_genome, path_annotation) :
        Channel.fromPath("${params.index}", checkIfExists:true)
    )
    //path_index.view()

    //fastq_files.view()
    counts_path = Mapping(fastq_files, path_index)
    counts_path.view()

}
