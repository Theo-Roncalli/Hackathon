"""
docstring
"""

import pandas as pd
import re

# We assume that SRA accession numbers will always have 6 digits
# TODO : discuss the positive lookahead (?=_Aligned)
# (I know it works but maybe it is a fragile pattern)
# DEFAULT_SRA_STR: str = r"SRR\d{6}(?=_Aligned)"
DEFAULT_SRA_STR: str = r"SRR\d{6}"
#DEFAULT_SRA_REGEX = re.compile(DEFAULT_SRA_STR)


def parse_counts_file(file, **read_csv_kw):
    """ Parse a file generated by featureCounts.
    Optional keyword arguments are passed to pandas.read_csv()

    The default keyword arguments are the following:
        
        _read_csv_kw = dict(header=1, delimiter="\t", index_col=0) 

    These were determined by examining the "counts.txt" 
    created by featureCounts.
    """

    _read_csv_kw = dict(header=1, delimiter="\t", index_col=0) 
    if read_csv_kw:
        _read_csv_kw.update(read_csv_kw)

    return pd.read_csv(file, **_read_csv_kw)
#

def rename_counts_columns_in_place(df, exp_id_pattern: str = DEFAULT_SRA_STR):
    """ Rename counts' (pandas.DataFrame) columns 
    
    params:
    ------
        df: a pandas data frame, containing the raw output of featureCounts
        
        exp_id_pattern: a raw string to be compiled into a re object (regex)
                        (r'this is a raw string')

    EXAMPLE:

    INPUT'S COLUMNS:

    >>>    'Chr', 'Start', 'End', 'Strand', 'Length',
    >>>       'Hackathon/Data/Counts/SRR628582/SRR628582_Aligned.sortedByCoord.out.bam',
    >>>       'Hackathon/Data/Counts/SRR628583/SRR628583_Aligned.sortedByCoord.out.bam',
    >>>       ...

    Column names are file paths (by default featureCounts does this)

    COLUMNS AFTER CALLING THE FUNCTION:
    >>>    'Chr', 'Start', 'End', 'Strand', 'Length', 'SRR628582', 'SRR628583',

    The SRR accession number has replaced the path (this is the default behaviour, 
    which can be overriden changing param `exp_id_pattern`).
    """

    _col_re = re.compile(exp_id_pattern)
    old_cols = df.columns.to_list()
    # new_cols := the match if the regex matched, else an empty string  
    new_cols = list(map(lambda x: _col_re.findall(x)[0] if _col_re.findall(x) else "", old_cols))
    if not any(new_cols):
        raise ValueError(f"Regex `{exp_id_pattern}` did not match any of the df's columns {old_cols}")
    # replace the columns that matched the regex by the regex match itself
    # leave the other columns intact
    df.columns = [ 
        (lambda x, y: x if x else y)(new, old) 
        for new, old in zip(new_cols, old_cols) 
    ]
#

def get_count_data(df, count_columns_pattern: str = DEFAULT_SRA_STR):
    """ """
    return df.filter(regex=count_columns_pattern)


def get_metadata(df, metadata_columns = ['Chr', 'Start', 'End', 'Strand', 'Length']):
    """ """ 
    return df[metadata_columns]
